// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: qa.proto

#include "qa.pb.h"
#include "qa.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace qa {

static const char* QuaAndAns_method_names[] = {
  "/qa.QuaAndAns/BuildModel",
  "/qa.QuaAndAns/GetTop5",
};

std::unique_ptr< QuaAndAns::Stub> QuaAndAns::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< QuaAndAns::Stub> stub(new QuaAndAns::Stub(channel));
  return stub;
}

QuaAndAns::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_BuildModel_(QuaAndAns_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTop5_(QuaAndAns_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status QuaAndAns::Stub::BuildModel(::grpc::ClientContext* context, const ::qa::QARequest& request, ::qa::QAReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BuildModel_, context, request, response);
}

void QuaAndAns::Stub::experimental_async::BuildModel(::grpc::ClientContext* context, const ::qa::QARequest* request, ::qa::QAReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BuildModel_, context, request, response, std::move(f));
}

void QuaAndAns::Stub::experimental_async::BuildModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::qa::QAReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BuildModel_, context, request, response, std::move(f));
}

void QuaAndAns::Stub::experimental_async::BuildModel(::grpc::ClientContext* context, const ::qa::QARequest* request, ::qa::QAReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BuildModel_, context, request, response, reactor);
}

void QuaAndAns::Stub::experimental_async::BuildModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::qa::QAReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BuildModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::qa::QAReply>* QuaAndAns::Stub::AsyncBuildModelRaw(::grpc::ClientContext* context, const ::qa::QARequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::qa::QAReply>::Create(channel_.get(), cq, rpcmethod_BuildModel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::qa::QAReply>* QuaAndAns::Stub::PrepareAsyncBuildModelRaw(::grpc::ClientContext* context, const ::qa::QARequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::qa::QAReply>::Create(channel_.get(), cq, rpcmethod_BuildModel_, context, request, false);
}

::grpc::Status QuaAndAns::Stub::GetTop5(::grpc::ClientContext* context, const ::qa::QARequest2& request, ::qa::QAReply2* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTop5_, context, request, response);
}

void QuaAndAns::Stub::experimental_async::GetTop5(::grpc::ClientContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTop5_, context, request, response, std::move(f));
}

void QuaAndAns::Stub::experimental_async::GetTop5(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::qa::QAReply2* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTop5_, context, request, response, std::move(f));
}

void QuaAndAns::Stub::experimental_async::GetTop5(::grpc::ClientContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTop5_, context, request, response, reactor);
}

void QuaAndAns::Stub::experimental_async::GetTop5(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::qa::QAReply2* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTop5_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::qa::QAReply2>* QuaAndAns::Stub::AsyncGetTop5Raw(::grpc::ClientContext* context, const ::qa::QARequest2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::qa::QAReply2>::Create(channel_.get(), cq, rpcmethod_GetTop5_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::qa::QAReply2>* QuaAndAns::Stub::PrepareAsyncGetTop5Raw(::grpc::ClientContext* context, const ::qa::QARequest2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::qa::QAReply2>::Create(channel_.get(), cq, rpcmethod_GetTop5_, context, request, false);
}

QuaAndAns::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QuaAndAns_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QuaAndAns::Service, ::qa::QARequest, ::qa::QAReply>(
          std::mem_fn(&QuaAndAns::Service::BuildModel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QuaAndAns_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QuaAndAns::Service, ::qa::QARequest2, ::qa::QAReply2>(
          std::mem_fn(&QuaAndAns::Service::GetTop5), this)));
}

QuaAndAns::Service::~Service() {
}

::grpc::Status QuaAndAns::Service::BuildModel(::grpc::ServerContext* context, const ::qa::QARequest* request, ::qa::QAReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QuaAndAns::Service::GetTop5(::grpc::ServerContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace qa

