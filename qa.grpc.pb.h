// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: qa.proto
#ifndef GRPC_qa_2eproto__INCLUDED
#define GRPC_qa_2eproto__INCLUDED

#include "qa.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace qa {

class QuaAndAns final {
 public:
  static constexpr char const* service_full_name() {
    return "qa.QuaAndAns";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status BuildModel(::grpc::ClientContext* context, const ::qa::QARequest& request, ::qa::QAReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qa::QAReply>> AsyncBuildModel(::grpc::ClientContext* context, const ::qa::QARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qa::QAReply>>(AsyncBuildModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qa::QAReply>> PrepareAsyncBuildModel(::grpc::ClientContext* context, const ::qa::QARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qa::QAReply>>(PrepareAsyncBuildModelRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTop5(::grpc::ClientContext* context, const ::qa::QARequest2& request, ::qa::QAReply2* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qa::QAReply2>> AsyncGetTop5(::grpc::ClientContext* context, const ::qa::QARequest2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qa::QAReply2>>(AsyncGetTop5Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qa::QAReply2>> PrepareAsyncGetTop5(::grpc::ClientContext* context, const ::qa::QARequest2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qa::QAReply2>>(PrepareAsyncGetTop5Raw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void BuildModel(::grpc::ClientContext* context, const ::qa::QARequest* request, ::qa::QAReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BuildModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::qa::QAReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BuildModel(::grpc::ClientContext* context, const ::qa::QARequest* request, ::qa::QAReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void BuildModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::qa::QAReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetTop5(::grpc::ClientContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTop5(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::qa::QAReply2* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTop5(::grpc::ClientContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetTop5(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::qa::QAReply2* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qa::QAReply>* AsyncBuildModelRaw(::grpc::ClientContext* context, const ::qa::QARequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qa::QAReply>* PrepareAsyncBuildModelRaw(::grpc::ClientContext* context, const ::qa::QARequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qa::QAReply2>* AsyncGetTop5Raw(::grpc::ClientContext* context, const ::qa::QARequest2& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qa::QAReply2>* PrepareAsyncGetTop5Raw(::grpc::ClientContext* context, const ::qa::QARequest2& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status BuildModel(::grpc::ClientContext* context, const ::qa::QARequest& request, ::qa::QAReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qa::QAReply>> AsyncBuildModel(::grpc::ClientContext* context, const ::qa::QARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qa::QAReply>>(AsyncBuildModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qa::QAReply>> PrepareAsyncBuildModel(::grpc::ClientContext* context, const ::qa::QARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qa::QAReply>>(PrepareAsyncBuildModelRaw(context, request, cq));
    }
    ::grpc::Status GetTop5(::grpc::ClientContext* context, const ::qa::QARequest2& request, ::qa::QAReply2* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qa::QAReply2>> AsyncGetTop5(::grpc::ClientContext* context, const ::qa::QARequest2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qa::QAReply2>>(AsyncGetTop5Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qa::QAReply2>> PrepareAsyncGetTop5(::grpc::ClientContext* context, const ::qa::QARequest2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qa::QAReply2>>(PrepareAsyncGetTop5Raw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void BuildModel(::grpc::ClientContext* context, const ::qa::QARequest* request, ::qa::QAReply* response, std::function<void(::grpc::Status)>) override;
      void BuildModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::qa::QAReply* response, std::function<void(::grpc::Status)>) override;
      void BuildModel(::grpc::ClientContext* context, const ::qa::QARequest* request, ::qa::QAReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void BuildModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::qa::QAReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTop5(::grpc::ClientContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response, std::function<void(::grpc::Status)>) override;
      void GetTop5(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::qa::QAReply2* response, std::function<void(::grpc::Status)>) override;
      void GetTop5(::grpc::ClientContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTop5(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::qa::QAReply2* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::qa::QAReply>* AsyncBuildModelRaw(::grpc::ClientContext* context, const ::qa::QARequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qa::QAReply>* PrepareAsyncBuildModelRaw(::grpc::ClientContext* context, const ::qa::QARequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qa::QAReply2>* AsyncGetTop5Raw(::grpc::ClientContext* context, const ::qa::QARequest2& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qa::QAReply2>* PrepareAsyncGetTop5Raw(::grpc::ClientContext* context, const ::qa::QARequest2& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_BuildModel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTop5_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status BuildModel(::grpc::ServerContext* context, const ::qa::QARequest* request, ::qa::QAReply* response);
    virtual ::grpc::Status GetTop5(::grpc::ServerContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_BuildModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BuildModel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_BuildModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildModel(::grpc::ServerContext* context, const ::qa::QARequest* request, ::qa::QAReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBuildModel(::grpc::ServerContext* context, ::qa::QARequest* request, ::grpc::ServerAsyncResponseWriter< ::qa::QAReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTop5 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTop5() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTop5() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTop5(::grpc::ServerContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTop5(::grpc::ServerContext* context, ::qa::QARequest2* request, ::grpc::ServerAsyncResponseWriter< ::qa::QAReply2>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_BuildModel<WithAsyncMethod_GetTop5<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BuildModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_BuildModel() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::qa::QARequest, ::qa::QAReply>(
          [this](::grpc::ServerContext* context,
                 const ::qa::QARequest* request,
                 ::qa::QAReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->BuildModel(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_BuildModel(
        ::grpc::experimental::MessageAllocator< ::qa::QARequest, ::qa::QAReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::qa::QARequest, ::qa::QAReply>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_BuildModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildModel(::grpc::ServerContext* context, const ::qa::QARequest* request, ::qa::QAReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BuildModel(::grpc::ServerContext* context, const ::qa::QARequest* request, ::qa::QAReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTop5 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetTop5() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::qa::QARequest2, ::qa::QAReply2>(
          [this](::grpc::ServerContext* context,
                 const ::qa::QARequest2* request,
                 ::qa::QAReply2* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetTop5(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetTop5(
        ::grpc::experimental::MessageAllocator< ::qa::QARequest2, ::qa::QAReply2>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::qa::QARequest2, ::qa::QAReply2>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTop5() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTop5(::grpc::ServerContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTop5(::grpc::ServerContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_BuildModel<ExperimentalWithCallbackMethod_GetTop5<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_BuildModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BuildModel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_BuildModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildModel(::grpc::ServerContext* context, const ::qa::QARequest* request, ::qa::QAReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTop5 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTop5() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTop5() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTop5(::grpc::ServerContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_BuildModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_BuildModel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_BuildModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildModel(::grpc::ServerContext* context, const ::qa::QARequest* request, ::qa::QAReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBuildModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTop5 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTop5() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTop5() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTop5(::grpc::ServerContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTop5(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BuildModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_BuildModel() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->BuildModel(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_BuildModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildModel(::grpc::ServerContext* context, const ::qa::QARequest* request, ::qa::QAReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BuildModel(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTop5 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTop5() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetTop5(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTop5() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTop5(::grpc::ServerContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTop5(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BuildModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BuildModel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::qa::QARequest, ::qa::QAReply>(std::bind(&WithStreamedUnaryMethod_BuildModel<BaseClass>::StreamedBuildModel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BuildModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BuildModel(::grpc::ServerContext* context, const ::qa::QARequest* request, ::qa::QAReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBuildModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qa::QARequest,::qa::QAReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTop5 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTop5() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::qa::QARequest2, ::qa::QAReply2>(std::bind(&WithStreamedUnaryMethod_GetTop5<BaseClass>::StreamedGetTop5, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTop5() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTop5(::grpc::ServerContext* context, const ::qa::QARequest2* request, ::qa::QAReply2* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTop5(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qa::QARequest2,::qa::QAReply2>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_BuildModel<WithStreamedUnaryMethod_GetTop5<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_BuildModel<WithStreamedUnaryMethod_GetTop5<Service > > StreamedService;
};

}  // namespace qa


#endif  // GRPC_qa_2eproto__INCLUDED
